# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYALUNJewyuAFiVt3C5pf3fZRrPA4IxO
"""

# import pandas as pd
# import random

# def assign_teams(file_path, output_path):
#     # Read the Excel file
#     data = pd.read_excel(file_path)

#     # Sort students by IQ level in descending order
#     sorted_students = data.sort_values(by='IQ level', ascending=False).reset_index(drop=True)

#     # Calculate the number of teams
#     num_teams = len(data) // 4

#     # Select top students as team leaders
#     team_leaders = sorted_students.iloc[:num_teams]

#     # Remaining students for team members
#     members_pool = sorted_students.iloc[num_teams:]

#     # Shuffle members_pool for random selection
#     members_pool = members_pool.sample(frac=1).reset_index(drop=True)

#     # Create teams
#     teams = []

#     for _, leader in team_leaders.iterrows():
#         if len(members_pool) < 3:
#             print("Not enough members to complete all teams.")
#             break

#         # Select 3 random members
#         team_members = members_pool.iloc[:3]

#         # Append the team details
#         team = [
#             {
#                 'Role': 'Team Leader',
#                 'Name': leader['Name'],
#                 'Enrollment no': leader['Enrollment no']
#             }
#         ]

#         team.extend([
#             {
#                 'Role': 'Member',
#                 'Name': member['Name'],
#                 'Enrollment no': member['Enrollment no']
#             }
#             for _, member in team_members.iterrows()
#         ])

#         teams.append(team)

#         # Remove the selected members from the pool
#         members_pool = members_pool.iloc[3:].reset_index(drop=True)

#     # Prepare the output data
#     output_data = []
#     for team in teams:
#         output_data.extend(team)
#         output_data.append({})  # Empty row for separation

#     # Convert to DataFrame and save to CSV
#     output_df = pd.DataFrame(output_data)
#     output_df.to_csv(output_path, index=False)

#     print(f"Teams saved to {output_path}")

# # Path to the Excel file
# file_path = '/content/Cisco list (2).xlsx'
# output_path = 'teams_output.csv'

# # Run the program
# assign_teams(file_path, output_path)

!pip install streamlit

import pandas as pd
import random
import streamlit as st
import os

def assign_teams(data):
    # Sort students by IQ level in descending order
    sorted_students = data.sort_values(by='IQ level', ascending=False).reset_index(drop=True)

    # Calculate the number of teams
    num_teams = len(data) // 4

    # Select top students as team leaders
    team_leaders = sorted_students.iloc[:num_teams]

    # Remaining students for team members
    members_pool = sorted_students.iloc[num_teams:]

    # Shuffle members_pool for random selection
    members_pool = members_pool.sample(frac=1).reset_index(drop=True)

    # Create teams
    teams = []

    for _, leader in team_leaders.iterrows():
        if len(members_pool) < 3:
            st.warning("Not enough members to complete all teams.")
            break

        # Select 3 random members
        team_members = members_pool.iloc[:3]

        # Append the team details
        team = [
            {
                'Role': 'Team Leader',
                'Name': leader['Name'],
                'Enrollment No': leader['Enrollment No']
            }
        ]

        team.extend([
            {
                'Role': 'Member',
                'Name': member['Name'],
                'Enrollment No': member['Enrollment No']
            }
            for _, member in team_members.iterrows()
        ])

        teams.append(team)

        # Remove the selected members from the pool
        members_pool = members_pool.iloc[3:].reset_index(drop=True)

    # Prepare the output data
    output_data = []
    for team in teams:
        output_data.extend(team)
        output_data.append({})  # Empty row for separation

    return pd.DataFrame(output_data)

# Streamlit UI
def main():
    st.title("Team Assignment Application")

    uploaded_file = st.file_uploader("Upload the Excel file", type=["xlsx"])

    if uploaded_file is not None:
        try:
            data = pd.read_excel(uploaded_file)

            if 'Name' not in data.columns or 'Enrollment No' not in data.columns or 'IQ level' not in data.columns:
                st.error("The file must contain 'Name', 'Enrollment No', and 'IQ level' columns.")
                return

            if st.button("Generate Teams"):
                output_df = assign_teams(data)

                # Save the output to a temporary CSV file
                output_path = "teams_output.csv"
                output_df.to_csv(output_path, index=False)

                st.success("Teams generated successfully!")

                # Display download link
                with open(output_path, "rb") as file:
                    st.download_button(
                        label="Download Teams CSV",
                        data=file,
                        file_name="teams_output.csv",
                        mime="text/csv"
                    )

                # Clean up temporary file
                os.remove(output_path)
        except Exception as e:
            st.error(f"An error occurred: {e}")

if __name__ == "__main__":
    main()